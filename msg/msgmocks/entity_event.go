// Code generated by mockery v2.33.0. DO NOT EDIT.

package msgmocks

import (
	core "github.com/rezaAmiri123/edat/core"
	mock "github.com/stretchr/testify/mock"

	msg "github.com/rezaAmiri123/edat/msg"
)

// EntityEvent is an autogenerated mock type for the EntityEvent type
type EntityEvent struct {
	mock.Mock
}

// EntityID provides a mock function with given fields:
func (_m *EntityEvent) EntityID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// EntityName provides a mock function with given fields:
func (_m *EntityEvent) EntityName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Event provides a mock function with given fields:
func (_m *EntityEvent) Event() core.Event {
	ret := _m.Called()

	var r0 core.Event
	if rf, ok := ret.Get(0).(func() core.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(core.Event)
		}
	}

	return r0
}

// Headers provides a mock function with given fields:
func (_m *EntityEvent) Headers() msg.Headers {
	ret := _m.Called()

	var r0 msg.Headers
	if rf, ok := ret.Get(0).(func() msg.Headers); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(msg.Headers)
		}
	}

	return r0
}

// NewEntityEvent creates a new instance of EntityEvent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEntityEvent(t interface {
	mock.TestingT
	Cleanup(func())
}) *EntityEvent {
	mock := &EntityEvent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
